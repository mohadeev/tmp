generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  phone     String?
  role      UserRole @default(CLIENT)
  credits   Float    @default(0) // Minutes purchased
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Client relationships
  clientCalls    Call[]        @relation("ClientCalls")
  clientPayments Payment[]     @relation("ClientPayments")
  clientReviews  Review[]      @relation("ClientReviews")

  // Advisor relationships
  advisorCalls     Call[]           @relation("AdvisorCalls")
  advisorProfile   AdvisorProfile?
  advisorPayouts   Payout[]         @relation("AdvisorPayouts")
  receivedReviews  Review[]         @relation("AdvisorReviews")
  availability     Availability[]

  @@map("users")
}

model AdvisorProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  description String
  expertise   String[]
  ratePerMinute Float
  avatar      String?
  isActive    Boolean @default(true)
  rating      Float   @default(0)
  totalCalls  Int     @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("advisor_profiles")
}

model Availability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  advisorId String   @db.ObjectId
  advisor   User     @relation(fields: [advisorId], references: [id], onDelete: Cascade)
  
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // "09:00"
  endTime   String   // "17:00"
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("availability")
}

model Call {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String     @db.ObjectId
  client     User       @relation("ClientCalls", fields: [clientId], references: [id])
  advisorId  String     @db.ObjectId
  advisor    User       @relation("AdvisorCalls", fields: [advisorId], references: [id])
  
  status     CallStatus @default(PENDING)
  duration   Int?       // in minutes
  cost       Float?     // total cost
  ratePerMinute Float   // rate at time of call
  
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Call connection details
  twilioCallSid String?
  
  @@map("calls")
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String        @db.ObjectId
  client    User          @relation("ClientPayments", fields: [clientId], references: [id])
  
  amount    Float
  credits   Float         // minutes purchased
  status    PaymentStatus @default(PENDING)
  
  // Stripe details
  stripePaymentIntentId String?
  stripeSessionId       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Payout {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  advisorId String      @db.ObjectId
  advisor   User        @relation("AdvisorPayouts", fields: [advisorId], references: [id])
  
  amount    Float
  status    PayoutStatus @default(PENDING)
  
  // Stripe details
  stripeTransferId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payouts")
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String @db.ObjectId
  client    User   @relation("ClientReviews", fields: [clientId], references: [id])
  advisorId String @db.ObjectId
  advisor   User   @relation("AdvisorReviews", fields: [advisorId], references: [id])
  
  rating    Int    // 1-5
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum UserRole {
  CLIENT
  ADVISOR
  ADMIN
}

enum CallStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}
